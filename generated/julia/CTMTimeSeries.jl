# autogenerated module using JSONSchema2Struct (author: I. Aravena, aravenasolis1@llnl.gov)
# timestamp: 2024-07-31T16:40:58.793

module CTMTimeSeries

import JSON3, StructTypes

Uid = Any

NonnegativeNumber = Float64

Base.@kwdef mutable struct TimeSeriesData
    name::Union{Missing, Vector{String}}=missing
    path_to_file::Union{Missing, Union{String, Vector{String}}}=missing
    values::Union{Missing, Vector{Vector{Any}}}=missing
    uid::Vector{Uid}=Vector{Uid}()
    ext::Union{Missing, Vector{Any}}=missing
    timestamp::Union{Missing, Vector{NonnegativeNumber}}=missing
end

Base.@kwdef mutable struct Root
    ctm_version::String=""
    time_series_data::TimeSeriesData=TimeSeriesData()
end

StructTypes.StructType(::Type{TimeSeriesData}) = StructTypes.Mutable()
StructTypes.StructType(::Type{Root}) = StructTypes.Mutable()

function parse(fname::String)::Root
    obj = open(fname, "r") do f
              JSON3.read(f, Root)
          end
    return obj
end

function remove_null_fields(fname::String)::Nothing
    run(pipeline(`grep -vwE '(: null)' $fname`, stdout=fname * "_tmp"))
    in_io = open(fname * "_tmp", "r")
    out_io = open(fname, "w")
    prev_ln = ""
    for ln in eachline(in_io)
        if prev_ln == ""        # first line
            prev_ln = ln
        elseif rstrip(prev_ln)[end] == ',' && lstrip(ln)[1] == '}'
            prev_ln = rstrip(prev_ln)[1:(end-1)]    # remove dangling comma
            println(out_io, prev_ln)
            prev_ln = ln
        else                    # nothing to do
            println(out_io, prev_ln)
            prev_ln = ln
        end
    end
    print(out_io, prev_ln)
    close(in_io)
    close(out_io)
    rm(fname * "_tmp")
end

function write(fname::String, x, omit_nulls::Bool=true)
    open(fname, "w") do f
        JSON3.pretty(f, x)
    end
    if omit_nulls
        remove_null_fields(fname)
    end
end

Int64() = Int64(0)
Float64() = Float64(0)
String() = ""
Bool() = false

Any() = nothing

end # module