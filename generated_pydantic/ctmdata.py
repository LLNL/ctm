# generated by datamodel-codegen:
#   filename:  ctm_data_schema.json
#   timestamp: 2024-04-10T06:08:25+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, Field, PositiveFloat, PositiveInt, confloat, conint


class UnitConvention(Enum):
    NATURAL_UNITS = 'NATURAL_UNITS'
    PER_UNIT_COMPONENT_BASE = 'PER_UNIT_COMPONENT_BASE'
    PER_UNIT_SYSTEM_BASE = 'PER_UNIT_SYSTEM_BASE'


class TypeEnum(Enum):
    PQ = 'PQ'
    PV = 'PV'
    slack = 'slack'


class PrimarySource(Enum):
    COAL = 'COAL'
    OIL = 'OIL'
    GAS = 'GAS'
    NUCLEAR = 'NUCLEAR'
    BIOMASS = 'BIOMASS'
    GEOTHERMAL = 'GEOTHERMAL'
    SOLAR = 'SOLAR'
    WIND = 'WIND'
    HYDRO = 'HYDRO'
    OTHER = 'OTHER'


class PrimarySourceSubtype(Enum):
    ANTRHC_BITMN_COAL = 'ANTRHC_BITMN_COAL'
    WASTE_COAL = 'WASTE_COAL'
    DISTILLATE_FUEL_OIL = 'DISTILLATE_FUEL_OIL'
    WASTE_OIL = 'WASTE_OIL'
    PETROLEUM_COKE = 'PETROLEUM_COKE'
    RESIDUAL_FUEL_OIL = 'RESIDUAL_FUEL_OIL'
    NATURAL_GAS = 'NATURAL_GAS'
    OTHER_GAS = 'OTHER_GAS'
    NUCLEAR = 'NUCLEAR'
    AG_BIPRODUCT = 'AG_BIPRODUCT'
    MUNICIPAL_WASTE = 'MUNICIPAL_WASTE'
    WOOD_WASTE = 'WOOD_WASTE'
    GEOTHERMAL = 'GEOTHERMAL'
    SOLAR_PV = 'SOLAR_PV'
    SOLAR_CSP = 'SOLAR_CSP'
    WIND_ONSHORE = 'WIND_ONSHORE'
    WIND_OFFSHORE = 'WIND_OFFSHORE'
    HYDRO_RUN_OF_THE_RIVER = 'HYDRO_RUN_OF_THE_RIVER'
    HYDRO_DAM = 'HYDRO_DAM'
    HYDRO_PUMPED_STORAGE = 'HYDRO_PUMPED_STORAGE'
    OTHER = 'OTHER'


class CostPgModel(Enum):
    POLYNOMIAL = 'POLYNOMIAL'
    PIECEWISE_LINEAR = 'PIECEWISE_LINEAR'
    MARGINAL_COST = 'MARGINAL_COST'


class Technology(Enum):
    LCC = 'LCC'
    VSC = 'VSC'
    MMC = 'MMC'


class ReserveType(Enum):
    PRIMARY = 'PRIMARY'
    SECONDARY = 'SECONDARY'
    TERTIARY = 'TERTIARY'


class TimeSeriesReference(BaseModel):
    uid: Union[conint(ge=0), str] = Field(
        ...,
        description='uid of time series (in time_series_data) this reference points to',
    )
    scale_factor: float = Field(
        ...,
        description="[-] scale factor to be applied to the pointed-to time series to obtain this field's values",
    )


class XyPairs(BaseModel):
    x: List[float]
    y: List[float]


class Global(BaseModel):
    unit_convention: UnitConvention = Field(
        ..., description='units used for physical network parameters'
    )
    base_mva: Optional[PositiveFloat] = Field(
        100.0, description='[MVA] system-wide apparent power base'
    )
    bus_ref: Optional[Union[conint(ge=0), str]] = Field(
        None, description='UID of reference bus of the electrical network'
    )


class Area(BaseModel):
    uid: Union[conint(ge=0), str] = Field(..., description="object's Unique IDentifier")
    status: conint(ge=0, le=1) = Field(
        ...,
        description='binary indicator of whether area should be included or omitted (if omitted all elements within area should be omitted); 1=>included, 0=>omitted',
    )
    name: Optional[str] = Field(None, description='area name')
    ext: Optional[Any] = Field(
        None, description='additional area parameters currently not supported by CTM'
    )


class Zone(BaseModel):
    uid: Union[conint(ge=0), str] = Field(..., description="object's Unique IDentifier")
    status: conint(ge=0, le=1) = Field(
        ...,
        description='binary indicator of whether zone should be included or omitted (if omitted all elements within zone should be omitted); 1=>included, 0=>omitted',
    )
    name: Optional[str] = Field(None, description='zone name')
    ext: Optional[Any] = Field(
        None, description='additional zone parameters currently not supported by CTM'
    )


class Bu(BaseModel):
    uid: Union[conint(ge=0), str] = Field(..., description="object's Unique IDentifier")
    status: conint(ge=0, le=1) = Field(
        ...,
        description='binary indicator of whether component should be included or omitted; 1=>included, 0=>omitted',
    )
    name: Optional[str] = Field(None, description='bus name')
    base_kv: PositiveFloat = Field(..., description='bus base (nominal) voltage')
    type: Optional[Union[TypeEnum, TimeSeriesReference]] = Field(
        None, description='bus type for power flow calculations (PV, PQ, or slack)'
    )
    vm_lb: Optional[Union[TimeSeriesReference, PositiveFloat]] = Field(
        None, description='bus voltage lower bound'
    )
    vm_ub: Optional[Union[TimeSeriesReference, PositiveFloat]] = Field(
        None, description='bus voltage upper bound'
    )
    area: Optional[Union[conint(ge=0), str]] = Field(
        None, description='uid for area to which bus belongs to'
    )
    zone: Optional[Union[conint(ge=0), str]] = Field(
        None, description='uid for zone to which bus belongs to'
    )
    ext: Optional[Any] = Field(
        None, description='additional bus parameters currently not supported by CTM'
    )


class Load(BaseModel):
    uid: Union[conint(ge=0), str] = Field(..., description="object's Unique IDentifier")
    status: conint(ge=0, le=1) = Field(
        ...,
        description='binary indicator of whether component should be included or omitted; 1=>included, 0=>omitted',
    )
    name: Optional[str] = Field(None, description='load name')
    bus: Union[conint(ge=0), str] = Field(
        ..., description='uid of bus to which load is connected to'
    )
    nominal_mva: Optional[PositiveFloat] = Field(
        None, description='[MVA] nominal power of load'
    )
    pd: Union[float, TimeSeriesReference] = Field(
        ..., description='active power demand'
    )
    qd: Union[float, TimeSeriesReference] = Field(
        ..., description='reactive power demand'
    )
    pd_i: Optional[Union[float, TimeSeriesReference]] = Field(
        None, description='constant current active power demand at v_bus = 1.0 pu'
    )
    qd_i: Optional[Union[float, TimeSeriesReference]] = Field(
        None, description='constant current reactive power demand at v_bus = 1.0 pu'
    )
    pd_y: Optional[Union[float, TimeSeriesReference]] = Field(
        None, description='constant impedance active power demand at v_bus = 1.0 pu'
    )
    qd_y: Optional[Union[float, TimeSeriesReference]] = Field(
        None, description='constant impedance reactive power demand at v_bus = 1.0 pu'
    )
    ext: Optional[Any] = Field(
        None, description='additional bus parameters currently not supported by CTM'
    )


class Shunt(BaseModel):
    uid: Union[conint(ge=0), str] = Field(..., description="object's Unique IDentifier")
    status: conint(ge=0, le=1) = Field(
        ...,
        description='binary indicator of whether component should be included or omitted; 1=>included, 0=>omitted',
    )
    name: Optional[str] = Field(None, description='shunt name')
    bus: Union[conint(ge=0), str] = Field(
        ..., description='uid of bus to which shunt is connected to'
    )
    nominal_mva: Optional[PositiveFloat] = Field(
        None, description='[MVA] nominal apparent power of shunt (nameplate capacity)'
    )
    num_steps_ub: Union[List[conint(ge=0)], conint(ge=0)] = Field(
        ...,
        description='upper bound for number of energized steps of shunt section (lower bound is always 0)',
    )
    gs: Union[List[confloat(ge=0.0)], confloat(ge=0.0)] = Field(
        ...,
        description='[MW or pu] active power demand at v_bus = 1.0 pu, per step of each shunt section',
    )
    bs: Union[float, List[float]] = Field(
        ...,
        description='[MVAr or pu] reactive power demand at v_bus = 1.0 pu, per step of each shunt section',
    )
    ext: Optional[Any] = Field(
        None, description='additional shunt parameters currently not supported by CTM'
    )


class Gen(BaseModel):
    uid: Union[conint(ge=0), str] = Field(..., description="object's Unique IDentifier")
    status: conint(ge=0, le=1) = Field(
        ...,
        description='binary indicator of whether component should be included or omitted; 1=>included, 0=>omitted',
    )
    name: Optional[str] = Field(None, description='generator name')
    bus: Union[conint(ge=0), str] = Field(
        ..., description='uid of bus to which generator is connected to'
    )
    nominal_mva: Optional[PositiveFloat] = Field(
        None,
        description='[MVA] nominal apparent power of generator (nameplate capacity)',
    )
    vm_setpoint: Optional[Union[TimeSeriesReference, PositiveFloat]] = Field(
        None,
        description='[kV or pu] target voltage magnitude of the bus that this generator connects to',
    )
    pg_lb: Optional[Union[float, TimeSeriesReference]] = Field(
        None,
        description='[MW or pu] lower bound of active power injection (rectangular operating zone)',
    )
    pg_ub: Optional[Union[float, TimeSeriesReference]] = Field(
        None,
        description='[MW or pu] upper bound of active power injection (rectangular operating zone)',
    )
    qg_lb: Optional[Union[float, TimeSeriesReference]] = Field(
        None,
        description='[MVAr or pu] lower bound of reactive power injection (rectangular operating zone)',
    )
    qg_ub: Optional[Union[float, TimeSeriesReference]] = Field(
        None,
        description='[MVAr or pu] upper bound of reactive power injection (rectangular operating zone)',
    )
    primary_source: Optional[PrimarySource] = Field(
        None, description='primary energy source'
    )
    primary_source_subtype: Optional[PrimarySourceSubtype] = Field(
        None,
        description='subtype of primary energy source; thermal classification taken from https://www.eia.gov/survey/form/eia_923/instructions.pdf',
    )
    cost_pg_model: Optional[CostPgModel] = Field(
        None,
        description='type of generation cost model (i.e., function translating power/energy to money); POLYNOMIAL => cost_pg_parameters is an array with n+1 coefficients <a_i> for f(x) = a_0 + a_1 x^1 + ... + a_n x^n; PIECEWISE_LINEAR => cost_pg_parameters is a series of values <x_i, f_i> and cost (f) should be interpolated linearly in between points; MARGINAL_COST => cost_pg_parameters is a series of values <b_i, m_i>, where m_i is a marginal cost ($/MWh or $/(pu*h)) and b_i is the amoung of power (MWh or pu*h) sold at marginal cost m_i',
    )
    cost_pg_parameters: Optional[
        Union[List[float], XyPairs, TimeSeriesReference]
    ] = Field(
        None,
        description='parameters of generation cost function, can be time dependent',
    )
    startup_cost_hot: Optional[Union[float, TimeSeriesReference]] = Field(
        None,
        description='[$] cost of starting the unit after being off <= startup_time_hot hours',
    )
    startup_cost_warm: Optional[Union[float, TimeSeriesReference]] = Field(
        None,
        description='[$] cost of starting the unit after being off > startup_time_hot hours, but <= startup_time_warm hours',
    )
    startup_cost_cold: Optional[Union[float, TimeSeriesReference]] = Field(
        None,
        description='[$] cost of starting the unit after being off > startup_time_warm hours',
    )
    shutdown_cost: Optional[Union[float, TimeSeriesReference]] = Field(
        None, description='[$] cost of shutting down the unit'
    )
    startup_time_hot: Optional[confloat(ge=0.0)] = Field(
        None, description='[h] maximum time the unit can be off before a hot startup'
    )
    startup_time_warm: Optional[confloat(ge=0.0)] = Field(
        None, description='[h] maximum time the unit can be off before a warm startup'
    )
    in_service_time_ub: Optional[confloat(ge=0.0)] = Field(
        None,
        description='[h] maximum time the unit can be in service (commitment == 1)',
    )
    in_service_time_lb: Optional[confloat(ge=0.0)] = Field(
        None,
        description='[h] minimim time the unit can be in service (a.k.a., minimum up time)',
    )
    down_time_lb: Optional[confloat(ge=0.0)] = Field(
        None,
        description='[h] minimim time the unit can be out of service (a.k.a., minimum down time)',
    )
    pg_delta_ub: Optional[confloat(ge=0.0)] = Field(
        None, description='[MW/h or pu/h] maximum active power increase per hour'
    )
    pg_delta_lb: Optional[confloat(ge=0.0)] = Field(
        None, description='[MW/h or pu/h] maximum active power decrease per hour'
    )
    service_required: Optional[Union[conint(ge=0, le=2), TimeSeriesReference]] = Field(
        None,
        description='whether generator must be in service (e.g., nuclear power plant) or out of service (e.g., generator during maintenance or after an outage); 0 => no requirement, 1 => fixed in service, 2 => fixed out of service',
    )
    forced_outage_rate: Optional[confloat(le=1.0)] = Field(
        None,
        description='[-] fraction of time the generator is out of service because of forced outages (i.e., hours out of service---because of failures---during a year, divided by 8760)',
    )
    mean_time_to_failure: Optional[confloat(ge=0.0)] = Field(
        None,
        description='[h] mean time to occurence of a failure; failures can be assumed to follow a Poisson process',
    )
    mean_time_to_repair: Optional[confloat(ge=0.0)] = Field(
        None, description='[h] mean time to repair a failure'
    )
    scheduled_maintenance_rate: Optional[confloat(le=1.0)] = Field(
        None,
        description='[-] fraction of time the generator is out of service because of scheduled maintenance (i.e., hours out of service---because of scheduled maintenance---during a year, divided by 8760)',
    )
    ext: Optional[Any] = Field(
        None, description='additional gen parameters currently not supported by CTM'
    )


class Storage(BaseModel):
    uid: Union[conint(ge=0), str] = Field(..., description="object's Unique IDentifier")
    status: conint(ge=0, le=1) = Field(
        ...,
        description='binary indicator of whether component should be included or omitted; 1=>included, 0=>omitted',
    )
    name: Optional[str] = Field(None, description='storage name')
    bus: Union[conint(ge=0), str] = Field(
        ..., description='uid of bus to which generator is connected to'
    )
    nominal_mva: Optional[PositiveFloat] = Field(
        None, description='[MVA] nominal apparent power of storage (nameplate capacity)'
    )
    charge_efficiency: Union[confloat(le=1.0, gt=0.0), TimeSeriesReference] = Field(
        ..., description='[-] charge efficiency, in (0, 1]'
    )
    discharge_efficiency: Union[confloat(le=1.0, gt=0.0), TimeSeriesReference] = Field(
        ..., description='[-] discharge efficiency, in (0, 1]'
    )
    ps_ex: float = Field(
        ..., description='converter standby active power exogenous draw'
    )
    qs_ex: float = Field(
        ..., description='converter standby reactive power exogenous draw'
    )
    energy_ub: Optional[confloat(ge=0.0)] = Field(
        None, description='[MWh or pu*h] maximum state of charge'
    )
    charge_ub: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None, description='[MW or pu] maximum rate of charge'
    )
    discharge_ub: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None, description='[MW or pu] maximum rate of discharge'
    )
    sm_ub: Optional[confloat(ge=0.0)] = Field(
        None, description='[MVA or pu] converter apparent power rating'
    )
    cm_ub: Optional[confloat(ge=0.0)] = Field(
        None, description='[kA or pu] converter current output rating'
    )
    qs_lb: Optional[Union[float, TimeSeriesReference]] = Field(
        None, description='[MVAr or pu] minumum reactive power injection'
    )
    qs_ub: Optional[Union[float, TimeSeriesReference]] = Field(
        None, description='[MVAr or pu] maximum reactive power injection'
    )
    ps_delta_ub: Optional[confloat(ge=0.0)] = Field(
        None, description='[MW/h or pu/h] maximum active power increase per hour'
    )
    ps_delta_lb: Optional[confloat(ge=0.0)] = Field(
        None, description='[MW/h or pu/h] maximum active power decrease per hour'
    )
    ext: Optional[Any] = Field(
        None, description='additional storage parameters currently not supported by CTM'
    )


class Switch(BaseModel):
    uid: Union[conint(ge=0), str] = Field(..., description="object's Unique IDentifier")
    status: conint(ge=0, le=1) = Field(
        ...,
        description='binary indicator of whether component should be included or omitted; 1=>included, 0=>omitted',
    )
    bus_fr: Union[conint(ge=0), str] = Field(
        ..., description='uid of bus at the from terminal of switch'
    )
    bus_to: Union[conint(ge=0), str] = Field(
        ..., description='uid of bus at the to terminal of switch'
    )
    name: Optional[str] = Field(None, description='name of switch')
    nominal_mva: Optional[PositiveFloat] = Field(
        None, description='[MVA] nominal apparent power of switch (nameplate capacity)'
    )
    sm_ub: Optional[confloat(ge=0.0)] = Field(
        None, description='[MVA or pu] apparent power flow limit'
    )
    cm_ub: Optional[confloat(ge=0.0)] = Field(
        None, description='[kA or pu] current limit'
    )
    ext: Optional[Any] = Field(
        None, description='additional switch parameters currently not supported by CTM'
    )


class AcLine(BaseModel):
    uid: Union[conint(ge=0), str] = Field(..., description="object's Unique IDentifier")
    status: conint(ge=0, le=1) = Field(
        ...,
        description='binary indicator of whether component should be included or omitted; 1=>included, 0=>omitted',
    )
    bus_fr: Union[conint(ge=0), str] = Field(
        ..., description='uid of bus at the from terminal of ac line'
    )
    bus_to: Union[conint(ge=0), str] = Field(
        ..., description='uid of bus at the to terminal of ac line'
    )
    name: Optional[str] = Field(None, description='line name')
    nominal_mva: Optional[PositiveFloat] = Field(
        None, description='[MVA] nominal apparent power of ac line'
    )
    r: float = Field(..., description='[Ohm or pu] series resistance of line')
    x: float = Field(..., description='[Ohm or pu] series impedance of line')
    g_fr: Optional[float] = Field(
        0, description='[S or pu] shunt conductance of line at from terminal'
    )
    b_fr: Optional[float] = Field(
        0, description='[S or pu] shunt susceptance of line at from terminal'
    )
    g_to: Optional[float] = Field(
        0, description='[S or pu] shunt conductance of line at to terminal'
    )
    b_to: Optional[float] = Field(
        0, description='[S or pu] shunt susceptance of line at to terminal'
    )
    sm_ub_a: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None, description='[MVA or pu] persistent apparent power rating'
    )
    sm_ub_b: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None, description='[MVA or pu] 4-hour apparent power rating'
    )
    sm_ub_c: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None, description='[MVA or pu] 15-minute apparent power rating'
    )
    cm_ub_a: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None, description='[kA or pu] persistent current rating'
    )
    cm_ub_b: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None, description='[kA or pu] 4-hour current rating'
    )
    cm_ub_c: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None, description='[kA or pu] 15-minute current rating'
    )
    vad_lb: Optional[float] = Field(
        None, description='[deg] voltage angle difference lower bound (stability)'
    )
    vad_ub: Optional[float] = Field(
        None, description='[deg] voltage angle difference upper bound (stability)'
    )
    transient_outage_rate: Optional[confloat(ge=0.0)] = Field(
        None,
        description='[year^-1] number of expected transient outages per year (outages cleared by reconnectors)',
    )
    persistent_outage_rate: Optional[confloat(ge=0.0)] = Field(
        None,
        description='[year^-1] number of expected persistent outages per year (outages not cleared by reconnectors)',
    )
    persistent_outage_duration: Optional[confloat(ge=0.0)] = Field(
        None,
        description='[hours] expected duration of persistent outage (time between outage and crews re-energizing the branch)',
    )
    ext: Optional[Any] = Field(
        None, description='additional ac line parameters currently not supported by CTM'
    )


class Transformer(BaseModel):
    uid: Union[conint(ge=0), str] = Field(..., description="object's Unique IDentifier")
    status: conint(ge=0, le=1) = Field(
        ...,
        description='binary indicator of whether component should be included or omitted; 1=>included, 0=>omitted',
    )
    bus_fr: Union[conint(ge=0), str] = Field(
        ..., description='uid of bus at the from terminal of transformer'
    )
    bus_to: Union[conint(ge=0), str] = Field(
        ..., description='uid of bus at the to terminal of transformer'
    )
    name: Optional[str] = Field(None, description='transformer name')
    nominal_mva: Optional[PositiveFloat] = Field(
        None, description='[MVA] nominal apparent power of transformer'
    )
    r: float = Field(..., description='[Ohm or pu] series resistance of line')
    x: float = Field(..., description='[Ohm or pu] series impedance of line')
    g: float = Field(
        ...,
        description='[S or pu] shunt conductance of transformer at from terminal (magnetizing branch)',
    )
    b: float = Field(
        ...,
        description='[S or pu] shunt susceptance of transformer at from terminal (magnetizing branch)',
    )
    tm_lb: Optional[PositiveFloat] = Field(
        1.0,
        description='[-] minimum tap ratio (1.0 correspond to nominal ratio, inner_vm_from = vm_from * tap_value)',
    )
    tm_ub: Optional[PositiveFloat] = Field(
        1.0,
        description='[-] maximum tap ratio (1.0 correspond to nominal ratio, inner_vm_from = vm_from * tap_value)',
    )
    tm_steps: Optional[PositiveInt] = Field(
        1,
        description='number of discrete steps between tm_lb and tm_ub (including limit values)',
    )
    ta_lb: Optional[float] = Field(
        0,
        description='[deg] minimum angle phase shift (angle difference = va_from - va_to - angle_shift)',
    )
    ta_ub: Optional[float] = Field(
        0,
        description='[deg] maximum angle phase shift (angle difference = va_from - va_to - angle_shift)',
    )
    ta_steps: Optional[PositiveInt] = Field(
        1,
        description='number of discrete steps between ta_lb and ta_ub (including limit values)',
    )
    sm_ub_a: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None,
        description='[MVA or pu] persistent apparent power rating, referred to from side',
    )
    sm_ub_b: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None,
        description='[MVA or pu] 4-hour apparent power rating, referred to from side',
    )
    sm_ub_c: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None,
        description='[MVA or pu] 15-minute apparent power rating, referred to from side',
    )
    cm_ub_a: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None, description='[kA or pu] persistent current rating, referred to from side'
    )
    cm_ub_b: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None, description='[kA or pu] 4-hour current rating, referred to from side'
    )
    cm_ub_c: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None, description='[kA or pu] 15-minute current rating, referred to from side'
    )
    persistent_outage_rate: Optional[confloat(ge=0.0)] = Field(
        None,
        description='[year^-1] number of expected persistent outages per year (outages not cleared by reconnectors)',
    )
    persistent_outage_duration: Optional[confloat(ge=0.0)] = Field(
        None,
        description='[hours] expected duration of persistent outage (time between outage and crews re-energizing the branch)',
    )
    ext: Optional[Any] = Field(
        None,
        description='additional transformer parameters currently not supported by CTM',
    )


class HvdcP2p(BaseModel):
    uid: Union[conint(ge=0), str] = Field(..., description="object's Unique IDentifier")
    status: conint(ge=0, le=1) = Field(
        ...,
        description='binary indicator of whether component should be included or omitted; 1=>included, 0=>omitted',
    )
    bus_fr: Union[conint(ge=0), str] = Field(
        ..., description='uid of bus at the from terminal of hvdc line'
    )
    bus_to: Union[conint(ge=0), str] = Field(
        ..., description='uid of bus at the to terminal of hvdc line'
    )
    name: Optional[str] = Field(None, description='HVDC line name')
    nominal_mva: Optional[PositiveFloat] = Field(
        None, description='[MVA] nominal apparent power of hvdc line'
    )
    base_kv_dc: Optional[PositiveFloat] = Field(
        None, description='[kV] base voltage at the dc side'
    )
    vm_dc_lb: Optional[PositiveFloat] = Field(
        None, description='[kV or pu] minimum voltage at the dc side'
    )
    vm_dc_ub: Optional[PositiveFloat] = Field(
        None, description='[kV or pu] maximum voltage at the dc side'
    )
    pdc_fr_lb: Optional[Union[float, TimeSeriesReference]] = Field(
        None,
        description='[MW or pu] minimum active power entering hvdc line at from bus',
    )
    qdc_fr_lb: Optional[Union[float, TimeSeriesReference]] = Field(
        None,
        description='[MVAr or pu] minimum reactive power entering hvdc line at from bus',
    )
    pdc_fr_ub: Optional[Union[float, TimeSeriesReference]] = Field(
        None,
        description='[MW or pu] maximum active power entering hvdc line at from bus',
    )
    qdc_fr_ub: Optional[Union[float, TimeSeriesReference]] = Field(
        None,
        description='[MVAr or pu] maximum reactive power entering hvdc line at from bus',
    )
    pdc_to_lb: Optional[Union[float, TimeSeriesReference]] = Field(
        None, description='[MW or pu] minimum active power entering hvdc line at to bus'
    )
    qdc_to_lb: Optional[Union[float, TimeSeriesReference]] = Field(
        None,
        description='[MVAr or pu] minimum reactive power entering hvdc line at to bus',
    )
    pdc_to_ub: Optional[Union[float, TimeSeriesReference]] = Field(
        None, description='[MW or pu] maximum active power entering hvdc line at to bus'
    )
    qdc_to_ub: Optional[Union[float, TimeSeriesReference]] = Field(
        None, description='[MW or pu] maximum active power entering hvdc line at to bus'
    )
    r: Optional[confloat(ge=0.0)] = Field(
        0.0,
        description='[Ohm or pu] dc line resistance (if in pu, base voltage corresponds to base_kv_dc)',
    )
    p: Optional[conint(ge=1, le=2)] = Field(
        None, description='number of poles; 1 => monopole, 2 => bipole'
    )
    technology: Optional[Technology] = Field(
        None, description='power conversion technology'
    )
    loss_a: Optional[confloat(ge=0.0)] = Field(0, description='[MW or pu] standby loss')
    loss_b: Optional[confloat(ge=0.0)] = Field(
        0,
        description='[kV or pu] loss proportional to current magnitude (if in pu, base voltage corresponds to base_kv_dc)',
    )
    loss_c: Optional[confloat(ge=0.0)] = Field(
        0,
        description='[Ohm or pu] loss proportional to current magnitude squared (if in pu, base voltage corresponds to base_kv_dc)',
    )
    sm_ub: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None, description='[MVA or pu] ac persistent apparent power rating'
    )
    cm_ub_fr: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None,
        description='[kA or pu] ac persistent current rating, to terminal (if in pu, use to bus base_kv)',
    )
    phi_lb: Optional[float] = Field(
        None,
        description='[deg] only meaningful if technology == LCC; firing angle minimum',
    )
    phi_ub: Optional[float] = Field(
        None,
        description='[deg] only meaningful if technology == LCC; firing angle maximum',
    )
    transient_outage_rate: Optional[confloat(ge=0.0)] = Field(
        None,
        description='[year^-1] number of expected transient outages per year (outages cleared by reconnectors or other)',
    )
    persistent_outage_rate: Optional[confloat(ge=0.0)] = Field(
        None,
        description='[year^-1] number of expected persistent outages per year (outages not cleared by reconnectors)',
    )
    persistent_outage_duration: Optional[confloat(ge=0.0)] = Field(
        None,
        description='[hours] expected duration of persistent outage (time between outage and crews re-energizing the branch)',
    )
    ext: Optional[Any] = Field(
        None,
        description='additional hvdc point-to-point parameters currently not supported by CTM',
    )


class Reserve(BaseModel):
    uid: Union[conint(ge=0), str] = Field(..., description="object's Unique IDentifier")
    status: conint(ge=0, le=1) = Field(
        ...,
        description='binary indicator of whether component should be included or omitted; 1=>included, 0=>omitted',
    )
    name: Optional[str] = Field(None, description='name of reserve product')
    reserve_type: ReserveType
    participants: Optional[List[Union[conint(ge=0), str]]] = Field(
        None, description='uid of generators contributing to this reserve'
    )
    pg_up: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None, description='[MW or pu] upward active power required by this reserve'
    )
    pg_down: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = Field(
        None, description='[MW or pu] downward active power required by this reserve'
    )
    ext: Optional[Any] = Field(
        None, description='additional reserve parameters currently not supported by CTM'
    )


class Network(BaseModel):
    global_: Global = Field(
        ...,
        alias='global',
        description='structure to hold global settings for parameters in the network',
    )
    area: List[Area]
    zone: List[Zone]
    bus: List[Bu]
    load: List[Load]
    shunt: Optional[List[Shunt]] = None
    gen: List[Gen]
    storage: Optional[List[Storage]] = None
    switch: Optional[List[Switch]] = None
    ac_line: Optional[List[AcLine]] = None
    transformer: Optional[List[Transformer]] = None
    hvdc_p2p: Optional[List[HvdcP2p]] = None
    reserve: Optional[List[Reserve]] = None


class Global1(BaseModel):
    time_elapsed: confloat(ge=0.0) = Field(
        ...,
        description='[seconds] time elapsed since temporal_boundary conditions where present in the system',
    )


class Bu1(BaseModel):
    uid: Union[conint(ge=0), str] = Field(
        ..., description='uid of bus this record refers to'
    )
    vm: Optional[PositiveFloat] = Field(
        None, description='[kV or pu] initial voltage magnitude'
    )
    va: float = Field(..., description='[deg] initial voltage angle')
    ext: Optional[Any] = Field(
        None,
        description='additional bus initial condition parameters currently not supported by CTM',
    )


class Shunt1(BaseModel):
    uid: Union[conint(ge=0), str] = Field(
        ..., description='uid of shunt this record refers to'
    )
    num_steps: Union[List[conint(ge=0)], conint(ge=0)] = Field(
        ..., description='[-] number of initial energized steps per section'
    )
    ext: Optional[Any] = Field(
        None,
        description='additional shunt initial condition parameters currently not supported by CTM',
    )


class Gen1(BaseModel):
    uid: Union[conint(ge=0), str] = Field(
        ..., description='uid of generator this record refers to'
    )
    pg: float = Field(..., description='[MW or pu] initial active power injection')
    qg: Optional[float] = Field(
        None, description='[MW or pu] initial reactive power injection'
    )
    in_service_time: Optional[confloat(ge=0.0)] = Field(
        None,
        description='[h] if in service, time the unit has been in service, zero otherwise',
    )
    down_time: Optional[confloat(ge=0.0)] = Field(
        None,
        description='[h] if in service, zero, else time the unit has been out of service',
    )
    ext: Optional[Any] = Field(
        None,
        description='additional generator initial condition parameters currently not supported by CTM',
    )


class Storage1(BaseModel):
    uid: Union[conint(ge=0), str] = Field(
        ..., description='uid of storage this record refers to'
    )
    ps: Optional[float] = Field(
        None, description='[MW or pu] initial active power injection'
    )
    qs: Optional[float] = Field(
        None, description='[MW or pu] initial reactive power injection'
    )
    energy: confloat(ge=0.0) = Field(
        ..., description='[MWh or pu*h] initial state of charge'
    )
    ext: Optional[Any] = Field(
        None,
        description='additional storage initial condition parameters currently not supported by CTM',
    )


class Switch1(BaseModel):
    uid: Union[conint(ge=0), str] = Field(
        ..., description='uid of switch this record refers to'
    )
    state: conint(ge=0, le=1) = Field(
        ...,
        description='[-] binary indicator of switch initial status; 0 => open, 1 => closed',
    )
    ext: Optional[Any] = Field(
        None,
        description='additional switch initial condition parameters currently not supported by CTM',
    )


class Transformer1(BaseModel):
    uid: Union[conint(ge=0), str] = Field(..., description="object's Unique IDentifier")
    tm: PositiveFloat = Field(..., description='[-] initial tap ratio')
    ta: float = Field(..., description='[deg] initial angle phase shift')
    ext: Optional[Any] = Field(
        None,
        description='additional transformer initial condition parameters currently not supported by CTM',
    )


class HvdcP2p1(BaseModel):
    uid: Union[conint(ge=0), str] = Field(
        ..., description='uid of hvdc point-to-point this record refers to'
    )
    vm_dc_fr: Optional[PositiveFloat] = Field(
        None, description='[kV or pu] initial dc side voltage at from converter'
    )
    vm_dc_to: Optional[PositiveFloat] = Field(
        None, description='[kV or pu] initial dc side voltage at to converter'
    )
    pdc_fr: float = Field(
        ...,
        description='[MW or pu] initial active power entering hvdc line at from bus',
    )
    qdc_fr: Optional[float] = Field(
        None,
        description='[MVAr or pu] initial reactive power entering hvdc line at from bus',
    )
    pdc_to: float = Field(
        ..., description='[MW or pu] initial active power entering hvdc line at to bus'
    )
    qdc_to: Optional[float] = Field(
        None,
        description='[MVAr or pu] initial reactive power entering hvdc line at to bus',
    )
    ext: Optional[Any] = Field(
        None,
        description='additional hvdc point-to-point line initial condition parameters currently not supported by CTM',
    )


class TemporalBoundary(BaseModel):
    global_: Global1 = Field(
        ...,
        alias='global',
        description='structure to hold global parameters of temporal boundary',
    )
    bus: Optional[List[Bu1]] = None
    shunt: Optional[List[Shunt1]] = None
    gen: Optional[List[Gen1]] = None
    storage: Optional[List[Storage1]] = None
    switch: Optional[List[Switch1]] = None
    transformer: Optional[List[Transformer1]] = None
    hvdc_p2p: Optional[List[HvdcP2p1]] = None


class TimeSeriesData(BaseModel):
    timestamp: Optional[List[confloat(ge=0.0)]] = Field(
        None,
        description='[seconds] seconds since epoch (Unix time) for each instant for which time series values are provided',
    )
    uid: List[Union[conint(ge=0), str]] = Field(
        ..., description='array of uids of time series'
    )
    name: Optional[List[str]] = Field(None, description='array of names of time series')
    path_to_file: Optional[Union[str, List[str]]] = Field(
        None,
        description='path to file containing all time series information or a separate path for each time series',
    )
    values: Optional[List[List]] = Field(
        None, description='array of time series values'
    )
    ext: Optional[List] = Field(
        None,
        description='additional time series information not currently supported by CTM',
    )


class CommonTransmissionModelCtmDataSchema(BaseModel):
    network: Network = Field(
        ..., description='structure to hold persistent network data'
    )
    temporal_boundary: TemporalBoundary = Field(
        ...,
        description='structure to hold data on initial conditions of power system (state prior to start of time series data)',
    )
    time_series_data: Optional[TimeSeriesData] = Field(
        None,
        description='structure to contain all time variant data of the system/case. All time series are synchronized to the same timestamps, which should should be stored using Unix time. Structure is quasi-tabular, with uid, name, path_to_file, values, and ext being arrays in the same order of said field. This is done in order to allow for better compression (e.g., using HDF5) for the values field.',
    )

from pydantic.tools import parse_obj_as
import json

def parse(filename):
    f = open(filename)
    json_dict = json.load(f)
    f.close()
    return parse_obj_as(Model, json_dict)

