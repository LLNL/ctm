# generated by datamodel-codegen:
#   filename:  ctm_solution_schema.json
#   timestamp: 2023-11-18T00:16:14+00:00

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import BaseModel, PositiveFloat, confloat, conint


class TimeSeriesReference(BaseModel):
    uid: Union[conint(ge=0), str]
    scale_factor: float


class Bu(BaseModel):
    uid: Union[conint(ge=0), str]
    vm: Union[TimeSeriesReference, PositiveFloat]
    va: Union[float, TimeSeriesReference]


class Shunt(BaseModel):
    uid: Union[conint(ge=0), str]
    num_steps: Union[List[conint(ge=0)], TimeSeriesReference, conint(ge=0)]


class Gen(BaseModel):
    uid: Union[conint(ge=0), str]
    pg: Union[float, TimeSeriesReference]
    qg: Union[float, TimeSeriesReference]
    in_service: Optional[Union[TimeSeriesReference, conint(ge=0, le=1)]] = None


class Storage(BaseModel):
    uid: Union[conint(ge=0), str]
    ps: Union[float, TimeSeriesReference]
    qs: Union[float, TimeSeriesReference]
    energy: Union[TimeSeriesReference, confloat(ge=0.0)]
    charge: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = None
    discharge: Optional[Union[TimeSeriesReference, confloat(ge=0.0)]] = None


class Switch(BaseModel):
    uid: Union[conint(ge=0), str]
    psw_fr: Union[float, TimeSeriesReference]
    qsw_fr: Union[float, TimeSeriesReference]
    state: Union[TimeSeriesReference, conint(ge=0, le=1)]


class AcLine(BaseModel):
    uid: Union[conint(ge=0), str]
    pl_fr: Union[float, TimeSeriesReference]
    ql_fr: Union[float, TimeSeriesReference]
    pl_to: Union[float, TimeSeriesReference]
    ql_to: Union[float, TimeSeriesReference]


class Transformer(BaseModel):
    uid: Union[conint(ge=0), str]
    tm: Optional[Union[float, TimeSeriesReference]] = None
    ta: Optional[Union[float, TimeSeriesReference]] = None
    pt_fr: Union[float, TimeSeriesReference]
    qt_fr: Union[float, TimeSeriesReference]
    pt_to: Union[float, TimeSeriesReference]
    qt_to: Union[float, TimeSeriesReference]


class HvdcP2p(BaseModel):
    uid: Union[conint(ge=0), str]
    vm_dc: Union[TimeSeriesReference, PositiveFloat]
    pdc_fr: Union[float, TimeSeriesReference]
    qdc_fr: Union[float, TimeSeriesReference]
    pdc_to: Union[float, TimeSeriesReference]
    qdc_to: Union[float, TimeSeriesReference]


class Solution(BaseModel):
    bus: List[Bu]
    shunt: List[Shunt]
    gen: List[Gen]
    storage: List[Storage]
    switch: List[Switch]
    ac_line: List[AcLine]
    transformer: List[Transformer]
    hvdc_p2p: List[HvdcP2p]


class TimeSeriesData(BaseModel):
    uid: List[Union[conint(ge=0), str]]
    name: Optional[List[str]] = None
    source_uid: Optional[List] = None
    path_to_file: Optional[Union[str, List[str]]] = None
    timestamp: Optional[List[conint(ge=0)]] = None
    values: Optional[List[List]] = None


class Model(BaseModel):
    solution: Solution
    time_series_data: Optional[TimeSeriesData] = None

from pydantic.tools import parse_obj_as
import json

def parse(filename):
    f = open(filename)
    json_dict = json.load(f)
    f.close()
    return parse_obj_as(Model, json_dict)

